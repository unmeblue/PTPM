package humantrackingperformancemetrics;

import static humantrackingperformancemetrics.HTPM_JFrame.computeGpsTimeOffset;
import java.awt.Dialog;
import java.awt.Frame;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

/**
 *
 * @author shackle
 */
public class CsvParseOptionsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CsvParseOptionsJPanel
     */
    public CsvParseOptionsJPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextFieldTimeScale = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldTimeOffset = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxXIndex = new javax.swing.JComboBox();
        jButtonOk = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxTimeIndex = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jComboBoxYIndex = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldDistanceScale = new javax.swing.JTextField();
        jComboBoxNameIndex = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jCheckBoxUseName = new javax.swing.JCheckBox();
        jCheckBoxUseZ = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        jComboBoxZIndex = new javax.swing.JComboBox();
        jCheckBoxUseVX = new javax.swing.JCheckBox();
        jComboBoxVXIndex = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jCheckBoxUseVY = new javax.swing.JCheckBox();
        jComboBoxVYIndex = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jCheckBoxUseVZ = new javax.swing.JCheckBox();
        jComboBoxVZIndex = new javax.swing.JComboBox();
        jCheckBoxUseConfidence = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        jComboBoxConfidenceIndex = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jCheckBoxUseRadius = new javax.swing.JCheckBox();
        jComboBoxRadiusIndex = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jCheckBoxApplyTransform = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        jTextFieldFileDelimiter = new javax.swing.JTextField();
        jCheckBoxTabDelim = new javax.swing.JCheckBox();
        jButtonComputeIgpsTimeOffset = new javax.swing.JButton();

        jLabel1.setText("Time Scale to seconds:");

        jTextFieldTimeScale.setText("1.0");

        jLabel2.setText("Time Offset:");

        jTextFieldTimeOffset.setText("0.0");
        jTextFieldTimeOffset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTimeOffsetActionPerformed(evt);
            }
        });

        jLabel3.setText("Time Index:");

        jComboBoxXIndex.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));

        jButtonOk.setText("Ok");
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jLabel4.setText("X Index:");

        jComboBoxTimeIndex.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));

        jLabel5.setText("Y Index:");

        jComboBoxYIndex.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));

        jLabel6.setText("Distance Scale to meters:");

        jTextFieldDistanceScale.setText("1.0");

        jComboBoxNameIndex.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));

        jLabel7.setText("Name/ID Index:");

        jCheckBoxUseName.setText("Use");
        jCheckBoxUseName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxUseNameActionPerformed(evt);
            }
        });

        jCheckBoxUseZ.setText("Use");
        jCheckBoxUseZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxUseZActionPerformed(evt);
            }
        });

        jLabel8.setText("Z Index:");

        jComboBoxZIndex.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));

        jCheckBoxUseVX.setText("Use");
        jCheckBoxUseVX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxUseVXActionPerformed(evt);
            }
        });

        jComboBoxVXIndex.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));

        jLabel9.setText("X Vel Index:");

        jCheckBoxUseVY.setText("Use");
        jCheckBoxUseVY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxUseVYActionPerformed(evt);
            }
        });

        jComboBoxVYIndex.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));

        jLabel10.setText("Y Vel Index:");

        jCheckBoxUseVZ.setText("Use");
        jCheckBoxUseVZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxUseVZActionPerformed(evt);
            }
        });

        jComboBoxVZIndex.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));

        jCheckBoxUseConfidence.setText("Use");
        jCheckBoxUseConfidence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxUseConfidenceActionPerformed(evt);
            }
        });

        jLabel11.setText("Z Vel Index:");

        jComboBoxConfidenceIndex.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));
        jComboBoxConfidenceIndex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxConfidenceIndexActionPerformed(evt);
            }
        });

        jLabel12.setText("Confidence Index:");

        jCheckBoxUseRadius.setText("Use");
        jCheckBoxUseRadius.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxUseRadiusActionPerformed(evt);
            }
        });

        jComboBoxRadiusIndex.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));

        jLabel13.setText("Radius Index:");

        jCheckBoxApplyTransform.setText("Apply HOMOGENEOUS TRANSFORMATION MATRIX");
        jCheckBoxApplyTransform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxApplyTransformActionPerformed(evt);
            }
        });

        jLabel14.setText("File Delimiter: ");

        jTextFieldFileDelimiter.setText(",");
        jTextFieldFileDelimiter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldFileDelimiterActionPerformed(evt);
            }
        });

        jCheckBoxTabDelim.setText("Tab");
        jCheckBoxTabDelim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxTabDelimActionPerformed(evt);
            }
        });

        jButtonComputeIgpsTimeOffset.setText("Compute IGPS Time Offset");
        jButtonComputeIgpsTimeOffset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonComputeIgpsTimeOffsetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(178, 178, 178)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jComboBoxNameIndex, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jComboBoxXIndex, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jComboBoxYIndex, 0, 215, Short.MAX_VALUE)
                                            .addComponent(jComboBoxZIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jComboBoxVXIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jComboBoxVYIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jComboBoxVZIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jComboBoxConfidenceIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jComboBoxRadiusIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(113, 113, 113)
                                        .addComponent(jCheckBoxApplyTransform))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(2, 2, 2)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTextFieldTimeScale, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                                            .addComponent(jTextFieldTimeOffset))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBoxUseRadius)
                                    .addComponent(jButtonComputeIgpsTimeOffset)
                                    .addComponent(jCheckBoxUseName)
                                    .addComponent(jCheckBoxUseZ)
                                    .addComponent(jCheckBoxUseVX)
                                    .addComponent(jCheckBoxUseVY)
                                    .addComponent(jCheckBoxUseVZ)
                                    .addComponent(jCheckBoxUseConfidence)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jTextFieldDistanceScale, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(178, 178, 178)
                                    .addComponent(jComboBoxTimeIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(566, 566, 566)
                        .addComponent(jButtonOk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jLabel14)
                        .addGap(2, 2, 2)
                        .addComponent(jTextFieldFileDelimiter, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxTabDelim)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jComboBoxConfidenceIndex, jComboBoxNameIndex, jComboBoxRadiusIndex, jComboBoxTimeIndex, jComboBoxVXIndex, jComboBoxVYIndex, jComboBoxVZIndex, jComboBoxXIndex, jComboBoxYIndex, jComboBoxZIndex});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldFileDelimiter, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxTabDelim))
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextFieldDistanceScale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldTimeScale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldTimeOffset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jButtonComputeIgpsTimeOffset))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxTimeIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxNameIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jCheckBoxUseName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxXIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxYIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxZIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jCheckBoxUseZ))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxVXIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jCheckBoxUseVX))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxVYIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jCheckBoxUseVY))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxVZIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jCheckBoxUseVZ))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxConfidenceIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(jCheckBoxUseConfidence))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxRadiusIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxUseRadius)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxApplyTransform)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOk)
                    .addComponent(jButtonCancel))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jTextFieldDistanceScale, jTextFieldFileDelimiter, jTextFieldTimeOffset, jTextFieldTimeScale});

    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldTimeOffsetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTimeOffsetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTimeOffsetActionPerformed
    public boolean cancelled = false;

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed
        try {
            options.DISTANCE_SCALE = Double.valueOf(this.jTextFieldDistanceScale.getText());
            options.TIME_SCALE = Double.valueOf(this.jTextFieldTimeScale.getText());
            options.TIME_OFFSET = Double.valueOf(this.jTextFieldTimeOffset.getText());
            options.TIME_INDEX = this.jComboBoxTimeIndex.getSelectedIndex();
            if (!this.jCheckBoxUseName.isSelected()) {
                options.NAME_INDEX = -1;
            } else {
                options.NAME_INDEX = this.jComboBoxNameIndex.getSelectedIndex();
            }
            options.X_INDEX = this.jComboBoxXIndex.getSelectedIndex();
            options.Y_INDEX = this.jComboBoxYIndex.getSelectedIndex();
            this.setVisible(false);
            if (null != this.dialog) {
                dialog.setVisible(false);
                dialog.dispose();
            }
        } catch (Exception exception) {
            exception.printStackTrace();
            JOptionPane.showMessageDialog(this, exception.getMessage());
        }
    }//GEN-LAST:event_jButtonOkActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        try {
            cancelled = true;
            options = null;
            this.setVisible(false);
            if (null != this.dialog) {
                dialog.setVisible(false);
                dialog.dispose();
            }
        } catch (Exception exception) {
            exception.printStackTrace();
            JOptionPane.showMessageDialog(this, exception.getMessage());
        }
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jCheckBoxUseNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxUseNameActionPerformed
        this.jComboBoxNameIndex.setEnabled(this.jCheckBoxUseName.isSelected());
    }//GEN-LAST:event_jCheckBoxUseNameActionPerformed

    private void jCheckBoxUseZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxUseZActionPerformed
        this.jComboBoxZIndex.setEnabled(this.jCheckBoxUseZ.isSelected());
        if (!this.jCheckBoxUseZ.isSelected()) {
            this.options.Z_INDEX = -1;
            this.jComboBoxZIndex.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_jCheckBoxUseZActionPerformed

    private void jCheckBoxUseVXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxUseVXActionPerformed
        this.jComboBoxVXIndex.setEnabled(this.jCheckBoxUseVX.isSelected());
        if (!this.jCheckBoxUseVX.isSelected()) {
            this.options.VX_INDEX = -1;
            this.jComboBoxVXIndex.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_jCheckBoxUseVXActionPerformed

    private void jCheckBoxUseVYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxUseVYActionPerformed
        this.jComboBoxVYIndex.setEnabled(this.jCheckBoxUseVY.isSelected());
        if (!this.jCheckBoxUseVY.isSelected()) {
            this.options.VY_INDEX = -1;
            this.jComboBoxVYIndex.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_jCheckBoxUseVYActionPerformed

    private void jCheckBoxUseVZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxUseVZActionPerformed
        this.jComboBoxVZIndex.setEnabled(this.jCheckBoxUseVZ.isSelected());
        if (!this.jCheckBoxUseVZ.isSelected()) {
            this.options.VZ_INDEX = -1;
            this.jComboBoxVZIndex.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_jCheckBoxUseVZActionPerformed

    private void jCheckBoxUseConfidenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxUseConfidenceActionPerformed
        this.jComboBoxConfidenceIndex.setEnabled(this.jCheckBoxUseConfidence.isSelected());
        if (!this.jCheckBoxUseConfidence.isSelected()) {
            this.options.CONFIDENCE_INDEX = -1;
            this.jComboBoxConfidenceIndex.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_jCheckBoxUseConfidenceActionPerformed

    private void jCheckBoxUseRadiusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxUseRadiusActionPerformed
        this.jComboBoxRadiusIndex.setEnabled(this.jCheckBoxUseRadius.isSelected());
        if (!this.jCheckBoxUseRadius.isSelected()) {
            this.options.RADIUS_INDEX = -1;
            this.jComboBoxRadiusIndex.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_jCheckBoxUseRadiusActionPerformed


    private void jCheckBoxApplyTransformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxApplyTransformActionPerformed
        if (!this.jCheckBoxApplyTransform.isSelected()) {
            options.transform = null;
        } else {
            options.transform = TransformMatrixJPanel.showDialog(frame, "Transform for " + this.file, options.transform);
        }
    }//GEN-LAST:event_jCheckBoxApplyTransformActionPerformed

    private void jComboBoxConfidenceIndexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxConfidenceIndexActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxConfidenceIndexActionPerformed

    private void jTextFieldFileDelimiterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldFileDelimiterActionPerformed
        this.setDelimiter(this.jTextFieldFileDelimiter.getText());
    }//GEN-LAST:event_jTextFieldFileDelimiterActionPerformed

    private void jCheckBoxTabDelimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxTabDelimActionPerformed
        if (this.jCheckBoxTabDelim.isSelected()) {
            this.jTextFieldFileDelimiter.setText("\t");
            this.jTextFieldFileDelimiter.setEnabled(false);
            this.jTextFieldFileDelimiter.setEditable(false);
            this.setDelimiter("\t");
        } else {
            this.jTextFieldFileDelimiter.setEnabled(true);
            this.jTextFieldFileDelimiter.setEditable(true);
        }
    }//GEN-LAST:event_jCheckBoxTabDelimActionPerformed

    private void jButtonComputeIgpsTimeOffsetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonComputeIgpsTimeOffsetActionPerformed
        try {
            options.TIME_OFFSET = computeGpsTimeOffset(
                    this.file.getCanonicalPath(),
                    options.delim);
            this.jTextFieldTimeScale.setText(Double.toString(options.TIME_SCALE));
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }//GEN-LAST:event_jButtonComputeIgpsTimeOffsetActionPerformed
    public JDialog dialog = null;
    public CsvParseOptions options = new CsvParseOptions();
    public Frame frame = null;

    public CsvParseOptions getParseOptions() {
        return this.options;
    }

    public void setParseOptions(CsvParseOptions o) {
        this.jTextFieldTimeOffset.setText(String.format("%.4g", o.TIME_OFFSET));
        this.jTextFieldTimeScale.setText(String.format("%.4g", o.TIME_SCALE));
        this.jTextFieldDistanceScale.setText(String.format("%.4g", o.DISTANCE_SCALE));
        if (o.TIME_INDEX < this.jComboBoxTimeIndex.getItemCount()) {
            this.jComboBoxTimeIndex.setSelectedIndex(o.TIME_INDEX);
        }

        if (o.NAME_INDEX >= 0) {
            if (o.NAME_INDEX < this.jComboBoxNameIndex.getItemCount()) {
                this.jComboBoxNameIndex.setSelectedIndex(o.NAME_INDEX);
            }
            this.jComboBoxNameIndex.setEnabled(true);
            this.jCheckBoxUseName.setSelected(true);
        } else {
            this.jComboBoxNameIndex.setEnabled(false);
            this.jCheckBoxUseName.setSelected(false);
        }
        if (o.X_INDEX < this.jComboBoxXIndex.getItemCount()) {
            this.jComboBoxXIndex.setSelectedIndex(o.X_INDEX);
        }
        if (o.Y_INDEX < this.jComboBoxYIndex.getItemCount()) {
            this.jComboBoxYIndex.setSelectedIndex(o.Y_INDEX);
        }
        if (o.Z_INDEX >= 0) {
            if (o.Z_INDEX < this.jComboBoxZIndex.getItemCount()) {
                this.jComboBoxZIndex.setSelectedIndex(o.Z_INDEX);
            }
            this.jComboBoxZIndex.setEnabled(true);
            this.jCheckBoxUseZ.setSelected(true);
        } else {
            this.jComboBoxZIndex.setEnabled(false);
            this.jCheckBoxUseZ.setSelected(false);
        }

        if (o.VX_INDEX >= 0) {
            if (o.VX_INDEX < this.jComboBoxVXIndex.getItemCount()) {
                this.jComboBoxVXIndex.setSelectedIndex(o.VX_INDEX);
            }
            this.jComboBoxVXIndex.setEnabled(true);
            this.jCheckBoxUseVX.setSelected(true);
        } else {
            this.jComboBoxVXIndex.setEnabled(false);
            this.jCheckBoxUseVX.setSelected(false);
        }

        if (o.VY_INDEX >= 0) {
            if (o.VY_INDEX < this.jComboBoxVYIndex.getItemCount()) {
                this.jComboBoxVYIndex.setSelectedIndex(o.VY_INDEX);
            }
            this.jComboBoxVYIndex.setEnabled(true);
            this.jCheckBoxUseVY.setSelected(true);
        } else {
            this.jComboBoxVYIndex.setEnabled(false);
            this.jCheckBoxUseVY.setSelected(false);
        }
        if (o.VZ_INDEX >= 0) {
            if (o.VZ_INDEX < this.jComboBoxVZIndex.getItemCount()) {
                this.jComboBoxVZIndex.setSelectedIndex(o.VZ_INDEX);
            }
            this.jComboBoxVZIndex.setEnabled(true);
            this.jCheckBoxUseVZ.setSelected(true);
        } else {
            this.jComboBoxVZIndex.setEnabled(false);
            this.jCheckBoxUseVZ.setSelected(false);
        }

        if (o.CONFIDENCE_INDEX >= 0) {
            if (o.CONFIDENCE_INDEX < this.jComboBoxConfidenceIndex.getItemCount()) {
                this.jComboBoxConfidenceIndex.setSelectedIndex(o.CONFIDENCE_INDEX);
            }
            this.jComboBoxConfidenceIndex.setEnabled(true);
            this.jCheckBoxUseConfidence.setSelected(true);
        } else {
            this.jComboBoxConfidenceIndex.setEnabled(false);
            this.jCheckBoxUseConfidence.setSelected(false);
        }
        if (o.RADIUS_INDEX >= 0) {
            if (o.RADIUS_INDEX < this.jComboBoxRadiusIndex.getItemCount()) {
                this.jComboBoxRadiusIndex.setSelectedIndex(o.RADIUS_INDEX);
            }
            this.jComboBoxRadiusIndex.setEnabled(true);
            this.jCheckBoxUseRadius.setSelected(true);
        } else {
            this.jComboBoxRadiusIndex.setEnabled(false);
            this.jCheckBoxUseRadius.setSelected(false);
        }
        this.options = o;
    }

    static public void LoadHeadingsToComboBoxModel(DefaultComboBoxModel cbm, String headings[]) {
        cbm.removeAllElements();
        String column_prefix = "";
        for (int i = 0; i < headings.length; i++) {
            if (i > 25) {
                column_prefix = "" + ((char) ('A' + ((i / 26) - 1)));
            }
            cbm.addElement(headings[i] + " ( Column " + column_prefix + ((char) ('A' + (i % 26))) + " ) = " + Integer.toString(i));
        }
    }

    /**
     * Get the value of delimiter
     *
     * @return the value of delimiter
     */
    public String getDelimiter() {
        return options.delim;
    }

    /**
     * Set the value of delimiter
     *
     * @param delimiter new value of delimiter
     */
    public void setDelimiter(String _delimiter) {
        options.delim = _delimiter;
        this.parseHeadings(file);
    }

    private File file;

    /**
     * Get the value of file
     *
     * @return the value of file
     */
    public File getFile() {
        return file;
    }

    /**
     * Set the value of file
     *
     * @param file new value of file
     */
    public void setFile(File file) {
        this.file = file;
    }

    static public String[] headingsFromFile(File f, String delim) {
        String headings[] = null;
        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(f));
            String first_line = br.readLine();
            if(null == first_line) {
                System.err.println("Can not read from "+f);
                return null;
            }
            //System.out.println("delim = " + delim);
            headings = first_line.split(delim);
            br.close();
            br = null;
        } catch (Exception e) {
            System.err.println("Error reading : "+ f);
            e.printStackTrace();
        }
        return headings;
    }

    static public CsvParseOptions optionsFromFileHeadings(CsvParseOptions o, File f, String delim) {
        String headings[] = CsvParseOptionsJPanel.headingsFromFile(f, delim);
        return optionsFromHeadings(o, headings);
    }

    static public CsvParseOptions optionsFromHeadings(CsvParseOptions o, String headings[]) {
        try {
            o.TIME_INDEX = CsvParseOptions.DEFAULT.TIME_INDEX;
            o.NAME_INDEX = CsvParseOptions.DEFAULT.NAME_INDEX;
            o.X_INDEX = CsvParseOptions.DEFAULT.X_INDEX;
            o.Y_INDEX = CsvParseOptions.DEFAULT.Y_INDEX;
            o.Z_INDEX = CsvParseOptions.DEFAULT.Z_INDEX;
            o.VX_INDEX = CsvParseOptions.DEFAULT.VX_INDEX;
            o.VY_INDEX = CsvParseOptions.DEFAULT.VY_INDEX;
            o.VZ_INDEX = CsvParseOptions.DEFAULT.VZ_INDEX;
            o.RADIUS_INDEX = CsvParseOptions.DEFAULT.RADIUS_INDEX;
            o.ROI_HEIGHT_INDEX = CsvParseOptions.DEFAULT.ROI_HEIGHT_INDEX;
            o.ROI_WIDTH_INDEX = CsvParseOptions.DEFAULT.ROI_WIDTH_INDEX;
            o.CONFIDENCE_INDEX = CsvParseOptions.DEFAULT.CONFIDENCE_INDEX;
            if (null == headings || headings.length < 2) {
                return o;
            }
            for (int i = 0; i < headings.length; i++) {
                if (headings[i].startsWith("\"")) {
                    headings[i] = headings[i].substring(1);
                }
                if (headings[i].endsWith("\"")) {
                    headings[i] = headings[i].substring(0, headings[i].length() - 1);
                }
            }
            if ("Time".compareTo(headings[0]) == 0
                    && "GpsTime".compareTo(headings[1]) == 0) {
                o.DISTANCE_SCALE = 1e-3f;
                o.TIME_SCALE = 1e-6f;
                o.TIME_INDEX = 0;
                o.NAME_INDEX = 2;
                o.CONFIDENCE_INDEX = -1;
                o.RADIUS_INDEX = -1;
                o.ROI_HEIGHT_INDEX = -1;
                o.ROI_WIDTH_INDEX = -1;
                o.VX_INDEX = -1;
                o.VY_INDEX = -1;
                o.VZ_INDEX = -1;
            }
            for (int i = 0; i < headings.length; i++) {
                String h = headings[i].trim();
                if (h.length() >= 4
                        && ("time".equalsIgnoreCase(h.substring(0, 4))
                        || "# time".equalsIgnoreCase(h.substring(0, 6)))
                        && o.TIME_INDEX == CsvParseOptions.DEFAULT.TIME_INDEX) {
                    o.TIME_INDEX = i;
                    if (h.indexOf("(ns)") > 0) {
                        o.TIME_SCALE = 1e-9;
                    }
                    if (h.indexOf("(ms)") > 0) {
                        o.TIME_SCALE = 1e-3;
                    }
                }
                if ("framename".equalsIgnoreCase(h)
                        && o.NAME_INDEX == CsvParseOptions.DEFAULT.NAME_INDEX) {
                    o.NAME_INDEX = i;
                }
                if ("personid".equalsIgnoreCase(h)
                        && o.NAME_INDEX == CsvParseOptions.DEFAULT.NAME_INDEX) {
                    o.NAME_INDEX = i;
                }
                if ("tiplocationx".equalsIgnoreCase(h)
                        && o.X_INDEX == CsvParseOptions.DEFAULT.X_INDEX) {
                    o.X_INDEX = i;
                }
                if ("tiplocationy".equalsIgnoreCase(h)
                        && o.Y_INDEX == CsvParseOptions.DEFAULT.Y_INDEX) {
                    o.Y_INDEX = i;
                }
                if ("tiplocationz".equalsIgnoreCase(h)
                        && o.Z_INDEX == CsvParseOptions.DEFAULT.Z_INDEX) {
                    o.Z_INDEX = i;
                }
                if ("headcentriodx".equalsIgnoreCase(h)
                        && o.X_INDEX == CsvParseOptions.DEFAULT.X_INDEX) {
                    o.X_INDEX = i;
                }
                if ("headcentriody".equalsIgnoreCase(h)
                        && o.Y_INDEX == CsvParseOptions.DEFAULT.Y_INDEX) {
                    o.Y_INDEX = i;
                }
                if ("headcentriodz".equalsIgnoreCase(h)
                        && o.Z_INDEX == CsvParseOptions.DEFAULT.Z_INDEX) {
                    o.Z_INDEX = i;
                }
                if ("personcentriodx".equalsIgnoreCase(h)
                        && o.X_INDEX == CsvParseOptions.DEFAULT.X_INDEX) {
                    o.X_INDEX = i;
                }
                if ("personcentriody".equalsIgnoreCase(h)
                        && o.Y_INDEX == CsvParseOptions.DEFAULT.Y_INDEX) {
                    o.Y_INDEX = i;
                }
                if ("personcentriodz".equalsIgnoreCase(h)
                        && o.Z_INDEX == CsvParseOptions.DEFAULT.Z_INDEX) {
                    o.Z_INDEX = i;
                }
                if ("xvelocity".equalsIgnoreCase(h)
                        && o.VX_INDEX == CsvParseOptions.DEFAULT.VX_INDEX) {
                    o.VX_INDEX = i;
                }
                if ("yvelocity".equalsIgnoreCase(h)
                        && o.VY_INDEX == CsvParseOptions.DEFAULT.VY_INDEX) {
                    o.VY_INDEX = i;
                }
                if ("zvelocity".equalsIgnoreCase(h)
                        && o.VZ_INDEX == CsvParseOptions.DEFAULT.VZ_INDEX) {
                    o.VZ_INDEX = i;
                }
                if ("confidence".equalsIgnoreCase(h)
                        && o.CONFIDENCE_INDEX == CsvParseOptions.DEFAULT.CONFIDENCE_INDEX) {
                    o.CONFIDENCE_INDEX = i;
                }
                if ("radius".equalsIgnoreCase(h)
                        && o.RADIUS_INDEX == CsvParseOptions.DEFAULT.RADIUS_INDEX) {
                    o.RADIUS_INDEX = i;
                }
            }
            if(swap_yz) {
                int tmp = o.Y_INDEX;
                o.Y_INDEX = o.Z_INDEX;
                o.Z_INDEX = tmp;
                tmp = o.VY_INDEX;
                o.VY_INDEX = o.VZ_INDEX;
                o.VZ_INDEX = tmp;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return o;
    }

    static public boolean swap_yz = false;
    
    public void parseHeadings(File f) {
        try {
            if (f != null) {
                this.setFile(f);
            } else {
                f = this.getFile();
            }
            String delim = this.getDelimiter();
            if (delim.length() < 1) {
                JOptionPane.showMessageDialog(this, "Empty delimiter");
                return;
            }
            String headings[] = CsvParseOptionsJPanel.headingsFromFile(f, delim);
            if (null == this.options) {
                this.options = new CsvParseOptions();
            }
            this.options = CsvParseOptionsJPanel.optionsFromHeadings(options, headings);
            CsvParseOptions o = this.options;
            DefaultComboBoxModel cbm = (DefaultComboBoxModel) this.jComboBoxTimeIndex.getModel();
            LoadHeadingsToComboBoxModel(cbm, headings);
            this.jComboBoxTimeIndex.setModel(cbm);
            cbm = (DefaultComboBoxModel) this.jComboBoxNameIndex.getModel();
            LoadHeadingsToComboBoxModel(cbm, headings);
            this.jComboBoxNameIndex.setModel(cbm);
            cbm = (DefaultComboBoxModel) this.jComboBoxXIndex.getModel();
            LoadHeadingsToComboBoxModel(cbm, headings);
            this.jComboBoxXIndex.setModel(cbm);
            cbm = (DefaultComboBoxModel) this.jComboBoxYIndex.getModel();
            LoadHeadingsToComboBoxModel(cbm, headings);
            this.jComboBoxYIndex.setModel(cbm);
            cbm = (DefaultComboBoxModel) this.jComboBoxZIndex.getModel();
            LoadHeadingsToComboBoxModel(cbm, headings);
            this.jComboBoxZIndex.setModel(cbm);
            cbm = (DefaultComboBoxModel) this.jComboBoxVXIndex.getModel();
            LoadHeadingsToComboBoxModel(cbm, headings);
            this.jComboBoxVXIndex.setModel(cbm);
            cbm = (DefaultComboBoxModel) this.jComboBoxVYIndex.getModel();
            LoadHeadingsToComboBoxModel(cbm, headings);
            this.jComboBoxVYIndex.setModel(cbm);
            cbm = (DefaultComboBoxModel) this.jComboBoxVZIndex.getModel();
            LoadHeadingsToComboBoxModel(cbm, headings);
            this.jComboBoxVZIndex.setModel(cbm);
            cbm = (DefaultComboBoxModel) this.jComboBoxConfidenceIndex.getModel();
            LoadHeadingsToComboBoxModel(cbm, headings);
            this.jComboBoxConfidenceIndex.setModel(cbm);
            cbm = (DefaultComboBoxModel) this.jComboBoxRadiusIndex.getModel();
            LoadHeadingsToComboBoxModel(cbm, headings);
            this.jComboBoxRadiusIndex.setModel(cbm);
            this.setParseOptions(o);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static public CsvParseOptions showDialog(Frame parent, File f) {
        try {

            CsvParseOptionsJPanel opanel = new CsvParseOptionsJPanel();
            opanel.parseHeadings(f);
            opanel.frame = parent;

            JDialog dialog = new JDialog(parent, Dialog.ModalityType.APPLICATION_MODAL);
            opanel.setVisible(true);
            opanel.dialog = dialog;
            dialog.add(opanel);
            dialog.pack();
            dialog.setVisible(true);
            opanel.frame = null;
            if (opanel.cancelled) {
                return null;
            }
            return opanel.options;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    static public CsvParseOptions showDialog(Frame parent, CsvParseOptions o) {
        CsvParseOptionsJPanel opanel = new CsvParseOptionsJPanel();
        JDialog dialog = new JDialog(parent, Dialog.ModalityType.APPLICATION_MODAL);
        opanel.setVisible(true);
        opanel.dialog = dialog;
        opanel.frame = parent;
        opanel.setParseOptions(o);
        dialog.add(opanel);
        dialog.pack();
        //dialog.setModal(Dialog.ModalityType.APPLICATION_MODAL);
        //OR, you can do the following...
        //JDialog dialog = new JDialog();
        //dialog.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
        //dialog.setBounds(transform_frame.getBounds());
        dialog.setVisible(true);
        opanel.frame = null;
        if (opanel.cancelled) {
            return null;
        }
        return opanel.options;
    }

    static public CsvParseOptions showDialog(Frame parent) {
        CsvParseOptionsJPanel opanel = new CsvParseOptionsJPanel();
        JDialog dialog = new JDialog(parent, Dialog.ModalityType.APPLICATION_MODAL);
        opanel.setVisible(true);
        opanel.dialog = dialog;
        dialog.add(opanel);
        dialog.pack();
        //dialog.setModal(Dialog.ModalityType.APPLICATION_MODAL);
        //OR, you can do the following...
        //JDialog dialog = new JDialog();
        //dialog.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);

        //dialog.setBounds(transform_frame.getBounds());
        dialog.setVisible(true);
        return opanel.options;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonComputeIgpsTimeOffset;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JCheckBox jCheckBoxApplyTransform;
    private javax.swing.JCheckBox jCheckBoxTabDelim;
    private javax.swing.JCheckBox jCheckBoxUseConfidence;
    private javax.swing.JCheckBox jCheckBoxUseName;
    private javax.swing.JCheckBox jCheckBoxUseRadius;
    private javax.swing.JCheckBox jCheckBoxUseVX;
    private javax.swing.JCheckBox jCheckBoxUseVY;
    private javax.swing.JCheckBox jCheckBoxUseVZ;
    private javax.swing.JCheckBox jCheckBoxUseZ;
    private javax.swing.JComboBox jComboBoxConfidenceIndex;
    private javax.swing.JComboBox jComboBoxNameIndex;
    private javax.swing.JComboBox jComboBoxRadiusIndex;
    private javax.swing.JComboBox jComboBoxTimeIndex;
    private javax.swing.JComboBox jComboBoxVXIndex;
    private javax.swing.JComboBox jComboBoxVYIndex;
    private javax.swing.JComboBox jComboBoxVZIndex;
    private javax.swing.JComboBox jComboBoxXIndex;
    private javax.swing.JComboBox jComboBoxYIndex;
    private javax.swing.JComboBox jComboBoxZIndex;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextFieldDistanceScale;
    private javax.swing.JTextField jTextFieldFileDelimiter;
    private javax.swing.JTextField jTextFieldTimeOffset;
    private javax.swing.JTextField jTextFieldTimeScale;
    // End of variables declaration//GEN-END:variables
}
