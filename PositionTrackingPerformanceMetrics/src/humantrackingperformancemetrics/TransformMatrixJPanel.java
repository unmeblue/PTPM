/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package humantrackingperformancemetrics;

import java.awt.Component;
import java.awt.Dialog;
import java.awt.Frame;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintStream;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableModel;

/**
 *
 * @author Will Shackleford <shackle@nist.gov>
 */
public class TransformMatrixJPanel extends javax.swing.JPanel {

    /**
     * Creates new form TransformMatrixJPanel
     */
    public TransformMatrixJPanel() {
        initComponents();
    }
    public String filename;
    public double transform[];
    public MonitoredConnection connection;
    public JDialog dialog;
    public static String transform_dir = System.getProperty("user.home");

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonSaveMatrix = new javax.swing.JButton();
        jButtonLoadMatrix = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonApplyAndClose = new javax.swing.JButton();
        jCheckBoxEnable = new javax.swing.JCheckBox();
        jButtonResetToIdentity = new javax.swing.JButton();

        jButtonSaveMatrix.setText("Save to File ...");
        jButtonSaveMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveMatrixActionPerformed(evt);
            }
        });

        jButtonLoadMatrix.setText("Load From File ...");
        jButtonLoadMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadMatrixActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1.0", "0.0", "0.0", "0.0"},
                {"0.0", "1.0", "0.0", "0.0"},
                {"0.0", "0.0", "1.0", "0.0"},
                {"0.0", "0.0", "0.0", "1.0"}
            },
            new String [] {
                "Rx", "Ry", "Rz", "Translation"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButtonApplyAndClose.setText("Apply and Close");
        jButtonApplyAndClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonApplyAndCloseActionPerformed(evt);
            }
        });

        jCheckBoxEnable.setText("Enable");
        jCheckBoxEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxEnableActionPerformed(evt);
            }
        });

        jButtonResetToIdentity.setText("Reset to Identity");
        jButtonResetToIdentity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetToIdentityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jCheckBoxEnable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonSaveMatrix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonApplyAndClose, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonResetToIdentity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 187, Short.MAX_VALUE)
                        .addComponent(jButtonLoadMatrix)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonLoadMatrix)
                    .addComponent(jButtonResetToIdentity))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSaveMatrix)
                    .addComponent(jCheckBoxEnable))
                .addGap(5, 5, 5)
                .addComponent(jButtonApplyAndClose)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSaveMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveMatrixActionPerformed
        try {
            TableCellEditor editor = this.jTable1.getCellEditor();
            if (editor != null) {
                editor.stopCellEditing();
            }
            TableModel tm = this.jTable1.getModel();
            String s = "";
            for (int i = 0; i < tm.getRowCount(); i++) {
                for (int j = 0; j < tm.getColumnCount(); j++) {
                    Object o = tm.getValueAt(i, j);
                    s += o.toString() + ",";
                }
                s += "\r\n";
            }
            System.out.println("Saving matrix : ");
            System.out.println(s);
            JFileChooser file_chooser = new JFileChooser();
            file_chooser.setCurrentDirectory(new File(transform_dir));
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                    "Comma Seperated Variable Files", "csv");
            file_chooser.setFileFilter(filter);
            if (file_chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                File f = file_chooser.getSelectedFile();
                if (!f.getName().endsWith(".csv")) {
                    f = new File(f.getParentFile(), f.getName() + ".csv");
                }
                filename = f.getCanonicalPath();
                transform_dir = f.getParentFile().getCanonicalPath();
                PrintStream ps = new PrintStream(f);
                ps.println(s);
                ps.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonSaveMatrixActionPerformed

    public void LoadFile(File f) throws Exception {
        filename = f.getCanonicalPath();
        BufferedReader br = new BufferedReader(new FileReader(f));
        int i = 0;
        String line;
        TableModel tm = this.jTable1.getModel();
        while ((line = br.readLine()) != null && i < tm.getRowCount()) {
            String fields[] = line.split(",");
            if (fields.length < 2) {
                continue;
            }
            for (int j = 0; j < fields.length && j < tm.getColumnCount(); j++) {
                tm.setValueAt(fields[j], i, j);
            }
            i++;
        }
        br.close();
    }

    private void jButtonLoadMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadMatrixActionPerformed
        try {
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new File(transform_dir));
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                    "Comma Seperated Variable Files", "csv");
            chooser.setFileFilter(filter);
            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File f = chooser.getSelectedFile();
                transform_dir = f.getParentFile().getCanonicalPath();
                LoadFile(f);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonLoadMatrixActionPerformed

    private void jButtonApplyAndCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonApplyAndCloseActionPerformed
        try {
            TableCellEditor editor = this.jTable1.getCellEditor();
            if (editor != null) {
                editor.stopCellEditing();
            }
            TableModel tm = this.jTable1.getModel();
            transform = new double[tm.getColumnCount() * tm.getRowCount()];
            for (int i = 0; i < tm.getRowCount(); i++) {
                for (int j = 0; j < tm.getColumnCount(); j++) {
                    Object o = tm.getValueAt(i, j);
                    Class cls = o.getClass();
                    System.out.println("cls = " + cls);
                    transform[i * tm.getColumnCount() + j] =
                            Double.valueOf(tm.getValueAt(i, j).toString());
                }
            }
            if (null != connection) {
                connection.transform = transform;
                connection.apply_transform = this.jCheckBoxEnable.isSelected();
                connection.transform_filename = this.filename;
            }
            this.setVisible(false);
            if (null != this.dialog) {
                dialog.setVisible(false);
                dialog.dispose();
            }
        } catch (Exception exception) {
            exception.printStackTrace();
            JOptionPane.showMessageDialog(this, exception.getMessage());
        }
    }//GEN-LAST:event_jButtonApplyAndCloseActionPerformed

    public void loadTransform(double _transform[]) {
        transform = _transform;
        TableModel tm = this.jTable1.getModel();
        for (int i = 0; i < tm.getRowCount(); i++) {
            for (int j = 0; j < tm.getColumnCount(); j++) {
                int index = i * tm.getColumnCount() + j;
                if (index >= transform.length) {
                    return;
                }
                tm.setValueAt(transform[index], i, j);
            }
        }
    }

    static public double[] showDialog(Frame parent, String title, double _transform[]) {
        TransformMatrixJPanel transform_panel = new TransformMatrixJPanel();
        if (null != _transform) {
            transform_panel.loadTransform(_transform);
        }
        JDialog dialog = new JDialog(parent, title, Dialog.ModalityType.APPLICATION_MODAL);
        transform_panel.setVisible(true);
        transform_panel.dialog = dialog;
        dialog.add(transform_panel);
        dialog.pack();
        //dialog.setModal(Dialog.ModalityType.APPLICATION_MODAL);
        //OR, you can do the following...
        //JDialog dialog = new JDialog();
        //dialog.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);

        //dialog.setBounds(transform_frame.getBounds());
        dialog.setVisible(true);
        return transform_panel.transform;
    }

    static public void showDialog(Frame parent, MonitoredConnection connection) {
        TransformMatrixJPanel transform_panel = new TransformMatrixJPanel();
        transform_panel.connection = connection;
        if (connection.transform != null) {
            transform_panel.loadTransform(connection.transform);
            transform_panel.jCheckBoxEnable.setSelected(connection.apply_transform);
        } else if (connection.transform_filename != null) {
            try {
                File f = new File(connection.transform_filename);
                if (f.exists() && f.canRead()) {
                    transform_panel.LoadFile(f);
                }
            } catch (Exception exception) {
                exception.printStackTrace();
            }
        }
        JDialog dialog = new JDialog(parent, Dialog.ModalityType.APPLICATION_MODAL);
        transform_panel.setVisible(true);
        transform_panel.dialog = dialog;
        dialog.add(transform_panel);
        dialog.pack();
        //dialog.setModal(Dialog.ModalityType.APPLICATION_MODAL);
        //OR, you can do the following...
        //JDialog dialog = new JDialog();
        //dialog.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);

        //dialog.setBounds(transform_frame.getBounds());
        dialog.setVisible(true);
    }

    private void jButtonResetToIdentityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetToIdentityActionPerformed
        TableModel tm = this.jTable1.getModel();
        for (int i = 0; i < tm.getRowCount(); i++) {
            for (int j = 0; j < tm.getColumnCount(); j++) {
                if (i == j) {
                    tm.setValueAt("1.0", i, j);
                } else {
                    tm.setValueAt("0.0", i, j);
                }
            }
        }
    }//GEN-LAST:event_jButtonResetToIdentityActionPerformed

    private void jCheckBoxEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxEnableActionPerformed
        this.jTable1.setEnabled(this.jCheckBoxEnable.isSelected());
    }//GEN-LAST:event_jCheckBoxEnableActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonApplyAndClose;
    private javax.swing.JButton jButtonLoadMatrix;
    private javax.swing.JButton jButtonResetToIdentity;
    private javax.swing.JButton jButtonSaveMatrix;
    private javax.swing.JCheckBox jCheckBoxEnable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
